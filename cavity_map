# -*- coding: utf-8 -*-
##You are given a square map of size n×nn×n. Each cell of the map has a value denoting its depth. We will call a cell of the map a cavity if and only if this cell is not on the border of the map and each cell adjacent to it has strictly smaller depth. Two cells are adjacent if they have a common side (edge).
##
##You need to find all the cavities on the map and depict them with the uppercase character X.
##
##Input Format
##
##The first line contains an integer, nn, denoting the size of the map. Each of the following nn lines contains nn positive digits without spaces. Each digit (1-9) denotes the depth of the appropriate area.
##
##Constraints 
##1≤n≤1001≤n≤100
##Output Format
##
##Output nn lines, denoting the resulting map. Each cavity should be replaced with character X.
##
##Sample Input
##
##4
##1112
##1912
##1892
##1234
##Sample Output
##
##1112
##1X12
##18X2
##1234
##Explanation
##
##The two cells with the depth of 9 fulfill all the conditions of the Cavity definition and have been replaced by X.


#!/bin/python
import sys

size_of_map = int(raw_input())
area = [raw_input() for i in range(size_of_map)]
x = [''] * size_of_map

for i in range(len(area)):
    for j in range(len(area[i])):
        if i == 0 or j == 0 or i == size_of_map-1 or j == size_of_map-1:
            x[i] = x[i] + area[i][j]
        else:
            ##If ques asks for equal or greater than value of center:
            ##if int(area[i][j]) >= int(area[i-1][j]) and int(area[i][j]) >= int(area[i][j-1]) and int(area[i][j]) >= int(area[i][j+1])and int(area[i][j]) >= int(area[i+1][j]):
            if int(area[i][j]) > int(area[i-1][j]) and int(area[i][j]) > int(area[i][j-1]) and int(area[i][j]) > int(area[i][j+1])and int(area[i][j]) > int(area[i+1][j]):
                x[i] = x[i] + 'X'
            else:
                x[i] = x[i] + area[i][j]
print '\n'.join(x)




##The following code failed, as I didn't check for all the values in a each string
##i.e, incorrect output is obtained as follows:
##5
##99999 <<<<<array starts
##99999
##99999
##99999
##99999  >>>>>>array stops
##99999
##9X9
##99X9
##999X9
##99999
###<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
##new = []
##for i in range(len(area)):
##    for j in range(len(area[i])):
##        if i!= 0 and i!= (size_of_map - 1) and j != 0 and j != (size_of_map - 1):
##            new.append((i, j, area[i][j]))
##print new
###<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
##
####Replacing the above code in list comprehension
####The following code fetches the values that is not in the border of the map
##new = [(i, j, area[i][j]) for i in range(len(area)) for j in range(len(area[i])) if i!= 0 and i!= (size_of_map - 1) and j != 0 and j != (size_of_map - 1)]
###print new
##
####Replace the cavity cell which matches the condition
##cavity = area[:]
##for each in new:
##    i = int(each[0])
##    j = int(each[1])
##    val = int(each[2])
##    ##Following code checks for the value sorrounded by the(adjacent to) cell and compares it for condition(adjacent cells contain value less than the cell value)
##    ##if val >= int(area[i-1][j-1])and val >= int(area[i-1][j]) and val >= int(area[i-1][j+1]) and val >= int(area[i][j-1]) and val >= int(area[i][j+1]) and val >= int(area[i+1][j-1]) and val >= int(area[i+1][j]) and val >= int(area[i+1][j+1]):
##        ##cavity[i] = area[i][:i] + 'X' + area[i][j+1:]
##    ##If just right,left,top and down cells are to be compared with center and check whether center is greater than or equal to all the 4 cells, then following code is enough
##    if val >= int(area[i-1][j]) and val >= int(area[i][j-1]) and val >= int(area[i][j+1])and val >= int(area[i+1][j]):
##        cavity[i] = area[i][:i] + 'X' + area[i][j+1:]
##
##print "\n".join(cavity)
##print len(area)
##print len(cavity)
