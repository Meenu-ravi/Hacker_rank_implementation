# -*- coding: utf-8 -*-
##Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The length of the service lane is N units. The service lane consists of N segments of equal length and different width.
##
##Calvin can enter to and exit from any segment. Let's call the entry segment as index i and the exit segment as index j. Assume that the exit segment lies after the entry segment (i≤j) and 0≤i. Calvin has to pass through all segments from index i to index j (both inclusive).
##
##Paradise Highway
##
##Calvin has three types of vehicles - bike, car, and truck - represented by 1, 2 and 3, respectively. These numbers also denote the width of the vehicle.
##
##You are given an array width of length N, where width[k] represents the width of the kth segment of the service lane. It is guaranteed that while servicing he can pass through at most 1000 segments, including the entry and exit segments.
##
##If width[k]=1, only the bike can pass through the kth segment.
##If width[k]=2, the bike and the car can pass through the kth segment.
##If width[k]=3, all three vehicles can pass through the kth segment.
##Given the entry and exit point of Calvin's vehicle in the service lane, output the type of the largest vehicle which can pass through the service lane (including the entry and exit segments).
##
##Input Format
##
##The first line of input contains two integers, N and T, where N denotes the length of the freeway and T the number of test cases. The next line has N space-separated integers which represent the width array.
##
##T test cases follow. Each test case contains two integers, i and j, where i is the index of the segment through which Calvin enters the service lane and j is the index of the lane segment through which he exits.
##
##Constraints 
##2≤N≤100000 
##1≤T≤1000 
##0≤i<j<N 
##2≤j−i+1≤min(N,1000) 
##1≤width[k]≤3,where 0≤k<N
##Output Format
##
##For each test case, print the number that represents the largest vehicle type that can pass through the service lane.
##
##Note: Calvin has to pass through all segments from index i to index j (both inclusive).
##
##Sample Input
##
##8 5
##2 3 1 2 3 2 3 3
##0 3
##4 6
##6 7
##3 5
##0 7
##Sample Output
##
##1
##2
##3
##2
##1
##Explanation
##
##Below is the representation of the lane:
##
##   |HIGHWAY|Lane|    ->    Width
##
##0: |       |--|            2
##1: |       |---|           3
##2: |       |-|             1
##3: |       |--|            2
##4: |       |---|           3
##5: |       |--|            2
##6: |       |---|           3
##7: |       |---|           3
##(0, 3): Because width[2] = 1, only the bike can pass through it.
##(4, 6): Here the largest allowed vehicle which can pass through the 5th segment is the car and for the 4th and 6th segment it's the truck. Hence the largest vehicle allowed in these segments is a car.
##(6, 7): In this example, the vehicle enters at the 6th segment and exits at the 7th segment. Both segments allow even trucks to pass through them. Hence the answer is 3.
##(3, 5): width[3] = width[5] = 2. While the 4th segment allows the truck, the 3rd and 5th allow up to a car. So 2 will be the answer here.
##(0, 7): The bike is the only vehicle which can pass through the 2nd segment, which limits the strength of the whole lane to 1.

##My understanding:
##Remember, the width for each vehicle: 1- bike, 2- car, 3- truck
##In the input, the firt line contains N(length of the freeway) - 8 and T(Number of test cases) - 5. Next line contains width of the freeway service lane.
##For eg: think of each values in the second row as value of an array, say a. a[0] = 2, a[1] = 3, a[2] = 1, a[3] = 2, a[4] = 3, a[5] = 2, a[6] = 3, a[7] = 3
##So the problem(i.e, testcases starts from the line 3. Where each line has two values, which is the entry and exit lanes of the vehicle. So in the first testcase(0 3),
##the vehicle that enters the lane should go from service lane array a[0] to a[3]. So, when we cross check the width of each array from a[0] to a[3], the observation is as follows:
##width of a[0] is 2
##width of a[1] is 3
##width of a[2] is 1
##width of a[3] is 2
##If a bike enters the lane or array a[0], then it can travel through all the lanes from a[0] to a[3]. If a car enters the lane a[0],
##then it can travel in lane a[0](as width is 2) and a[1](as width is 3). But the width of a[2] is 1, which can accomodate only bike. Since even car will not be able 
##to travel through the service lane, its not necessary to check with the truck. Similarly, all the testcases must be checked. So, the best way to solve this problem
##is, get the values of each array and check the range and get the minimum value in the range of array. For ex, in the first tc, the range is a[0] to a[3] whic has width
##2,3,1,2. The minimum value in the given array is 1. So the output should be 1(which is a bike)

#Soln 1:
#!/bin/python

import sys

N, T = map(int, raw_input().split())
width = raw_input().split()
width = map(int, width)
tc = []
for i in range(T):
    a, b = map(int, raw_input().split())
    print min(width[a:b+1])

#Soln 2:
#!/bin/python

import sys

N, T = map(int, raw_input().split())
width = raw_input().split()
width = map(int, width)
tc = []
for i in range(T):
    tc.append(tuple(map(int,raw_input().split())))
for each in tc:
    print min(width[each[0]:each[1]+1])
