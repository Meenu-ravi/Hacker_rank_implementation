# -*- coding: utf-8 -*-
##You are given a list of NN people who are attending ACM-ICPC World Finals. Each of them are either well versed in a topic or they are not. Find out the maximum number of topics a 2-person team can know. And also find out how many teams can know that maximum number of topics.
##
##Note Suppose a, b, and c are three different people, then (a,b) and (b,c) are counted as two different teams.
##
##Input Format
##
##The first line contains two integers, NN and MM, separated by a single space, where NN represents the number of people, and MM represents the number of topics. NN lines follow.
##Each line contains a binary string of length MM. If the iith line's jjth character is 11, then the iith person knows the jjth topic; otherwise, he doesn't know the topic.
##
##Constraints 
##2≤N≤5002≤N≤500 
##1≤M≤5001≤M≤500
##
##Output Format
##
##On the first line, print the maximum number of topics a 2-person team can know. 
##On the second line, print the number of 2-person teams that can know the maximum number of topics.
##
##Sample Input
##
##4 5
##10101
##11100
##11010
##00101
##Sample Output
##
##5
##2
##Explanation
##
##(1, 3) and (3, 4) know all the 5 topics. So the maximal topics a 2-person team knows is 5, and only 2 teams can achieve this.


#!/bin/python
import sys
import itertools
n, m = map(int, raw_input().split()) #no_of_people - n and no_of_topics - m
mat = [raw_input() for i in range(n)]
comb = list(itertools.combinations(mat, 2))
tot_topics = [bin(int(i[0],2) | int(i[1], 2)).count("1") for i in comb]
print max(tot_topics)
print tot_topics.count(max(tot_topics))




##Following code should be used if the teams are also asked in the problem statement. Since they just need the count of the teams and topics, the above code is enough
##mat = [[i+1, raw_input()] for i in range(n)]   ##give each team a number and assign raw input to that number for checking which teams has max topics
##print mat
##comb = list(itertools.combinations(mat, 2))
##print comb
##max_top = []
##total_set = 0
##for i in comb:
##    print i[0][0], i[1][0]   ##Teams combination
##    print bin(int(i[0][1],2) | int(i[1][1],2))     ##combination of topics with binary or operation
##    total_set = bin(int(i[0][1],2) | int(i[1][1],2)).count("1")  ##Total number of set bits(no. of '1' bits)
##    max_top.append(total_set)
##print max(max_top)
##print max_top.count(max(max_top))
